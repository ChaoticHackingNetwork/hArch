#!/usr/bin/env bash

# Harch UEFI/BIO Automated Install (Hackers Arch)
# ---------------------------------------------------------------
# Author    : Chaotic_Guru                                       |
# Github    : https://github.com/ChaoticHackingNetwork           |
# Version   : 0.1.4 						 					 | 
# ---------------------------------------------------------------

GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RESET='\033[0m'
NEWLINE=$'\n'

log_info() {
    echo -e "[INFO] $1"
}

log_warning() {
    echo -e "[WARNING] $1"
}

log_error() {
    echo -e "[ERROR] $1"
}

print_info() {
    echo -e "[${YELLOW}INFO${RESET}] $1${NEWLINE}"
}

# Exit script on error with a message
exit_on_error() {
    log_error "$1"
    exit 1
}

prompt_for_input() {
    read -p "$1" response
    echo "$response"
}

log_success() {
    echo -e "[SUCCESS] $1"
}

# Determine if the system is UEFI or BIOS
is_uefi_system() {
    if [[ -d "/sys/firmware/efi" ]]; then
        return 0  # True, it is UEFI
    else
        return 1  # False, it is not UEFI
    fi
}

greet() {
	echo -e "${PURPLE}Chaotic_Guru's hArch Installer${RESET}"
	echo ${NEWLINE}
	echo -e "${YELLOW}-> Simple${RESET}"
	echo -e "${GREEN}--> Quick${RESET}"
	echo -e "${WHITE}---> Efficient${RESET}"
	echo ${NEWLINE}
	echo -e ${YELLOW}
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo " ██░ ██  ▄▄▄       ██▀███   ▄████▄   ██░ ██     ██▓     ██▓ ███▄    █  █    ██ ▒██   ██▒"
	echo "▓██░ ██▒▒████▄    ▓██ ▒ ██▒▒██▀ ▀█  ▓██░ ██▒   ▓██▒    ▓██▒ ██ ▀█   █  ██  ▓██▒▒▒ █ █ ▒░"
	echo "▒██▀▀██░▒██  ▀█▄  ▓██ ░▄█ ▒▒▓█    ▄ ▒██▀▀██░   ▒██░    ▒██▒▓██  ▀█ ██▒▓██  ▒██░░░  █   ░"
	echo "░▓█ ░██ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓▓▄ ▄██▒░▓█ ░██    ▒██░    ░██░▓██▒  ▐▌██▒▓▓█  ░██░ ░ █ █ ▒ "
	echo "░▓█▒░██▓ ▓█   ▓██▒░██▓ ▒██▒▒ ▓███▀ ░░▓█▒░██▓   ░██████▒░██░▒██░   ▓██░▒▒█████▓ ▒██▒ ▒██▒"
	echo " ▒ ░░▒░▒ ▒▒   ▓▒█░░ ▒▓ ░▒▓░░ ░▒ ▒  ░ ▒ ░░▒░▒   ░ ▒░▓  ░░▓  ░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒ ▒▒ ░ ░▓ ░"
	echo " ▒ ░▒░ ░  ▒   ▒▒ ░  ░▒ ░ ▒░  ░  ▒    ▒ ░▒░ ░   ░ ░ ▒  ░ ▒ ░░ ░░   ░ ▒░░░▒░ ░ ░ ░░   ░▒ ░"
	echo " ░  ░░ ░  ░   ▒     ░░   ░ ░         ░  ░░ ░     ░ ░    ▒ ░   ░   ░ ░  ░░░ ░ ░  ░    ░  "
	echo " ░  ░  ░      ░  ░   ░     ░ ░       ░  ░  ░       ░  ░ ░           ░    ░      ░    ░  "
	echo "                           ░                                                            "
	echo -e "${RESET}"
	echo ${NEWLINE}
	echo ${NEWLINE}
}

checkNet() {
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo -e "[${YELLOW}INFO${RESET}] Checking Internet Connection...${NEWLINE}"
	if nc -zw1 archlinux.org 443
	then
  	echo -e "[${YELLOW}INFO${RESET}] Firing up Scripting Engines..."
	echo -e "[${YELLOW}INFO${RESET}] Enabling Parallel Downloads..."
	sed -i '/#ParallelDownloads/s/^#//g' /etc/pacman.conf
	echo -e "[${YELLOW}INFO${RESET}] Syncing time..."
	timedatectl set-ntp true
	else
	echo -e "[${RED}ERROR${RESET}] Check Internet connection, something went wrong"
	exit
	
	fi
}

installer() {
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo -e "[${YELLOW}INFO${RESET}] Installing base system...${NEWLINE}"
	sleep 2
	pacstrap /mnt base base-devel linux linux-firmware vi vim nano
	#Generate fstab
	genfstab -U /mnt >> /mnt/etc/fstab
}

# Function to dynamically calculate swap size based on system RAM
calculate_swap_size() {
    local ram_gb=$(free -g | awk '/^Mem:/{print $2}')
    local swap_size="2G" # Default to 2GB if unable to determine

    if ((ram_gb < 4)); then
        swap_size="${ram_gb}G"
    elif ((ram_gb < 16)); then
        swap_size="4G"
    else
        swap_size="8G"
    fi

    echo "$swap_size"
}

# Function to perform automatic partitioning and mounting
auto_partition() {
    local drive="$1"
    local is_uefi="$2"

    if $is_uefi; then
        print_info "UEFI System Detected!"
        local swap_size=$(calculate_swap_size)
        
        # Command list for UEFI
        cmd_list=(
            "g" "n" "" "" "+512M"  # EFI partition
            "n" "" "" "$swap_size" # Swap partition
            "n" "" "" ""           # Root partition
            "t" "1" "1"            # Set type of EFI partition to EFI System
            "t" "2" "19"           # Set type of swap to Linux swap (using code 19 for Linux swap)
            "w"                    # Write changes
        )
    else
        print_info "BIOS System Detected!"
        local swap_size=$(calculate_swap_size)
        
        # Command list for BIOS
        cmd_list=(
            "o" "n" "p" "" "" "+${swap_size}" # Swap partition
            "n" "p" "" "" ""                  # Root partition
            "t" "1" "82"                      # Set type of first partition to Linux swap
            "w"                              # Write changes
        )
    fi

    # Execute commands through fdisk
    printf "%s\n" "${cmd_list[@]}" | fdisk "$drive"

    # New: Formatting and mounting partitions
    if $is_uefi; then
        # Formatting partitions
        print_info "Formatting partitions..."
        mkfs.fat -F32 "${drive}1"  # EFI partition
        mkswap "${drive}2"         # Swap partition
        mkfs.ext4 "${drive}3"      # Root partition

        # Setting up swap
        swapon "${drive}2"

        # Mounting partitions
        print_info "Mounting partitions..."
        mount "${drive}3" /mnt
        mkdir -p /mnt/boot/EFI
        mount "${drive}1" /mnt/boot/EFI
    else
        # Assuming BIOS setup with no EFI partition, adjust as necessary
        mkswap "${drive}1"         # Swap partition
        mkfs.ext4 "${drive}2"      # Root partition

        # Setting up swap
        swapon "${drive}1"

        # Mounting root partition
        mount "${drive}2" /mnt
    fi
}


# Main function to get and prepare the drive
getDrive() {
    echo -e "${NEWLINE}[${YELLOW}INFO${RESET}] Gathering drives...${NEWLINE}"
    lsblk -f
    local drive=$(prompt_for_input "Enter Drive to prepare (e.g., /dev/sda): ")
    local manual=$(prompt_for_input "Do you want to manually partition [y/n]: ")

    if [[ $manual == 'y' || $manual == 'Y' ]]; then
        cfdisk "$drive"
        print_info "Entering BASH shell. Make your filesystem and mount /mnt. Type exit once finished."
        bash
    else
        print_info "Modifying $drive... HANG TIGHT!!!"
        sleep 3

        local is_uefi=false
        if is_uefi_system; then
            is_uefi=true
        fi

        auto_partition "$drive" "$is_uefi"

        # Additional setup can go here (e.g., formatting partitions, mounting)
        # This is where you would add your partition formatting and mounting logic,
        # similar to the original script but using the improved structure.
    fi
}

lastMinSetup() {
	#Finish last minute setup
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo 0 > /proc/sys/kernel/hung_task_timeout_secs
	curl -O 'https://raw.githubusercontent.com/ChaoticHackingNetwork/Harch/main/hArchPost'
	chmod +x hArchPost
	mv hArchPost /mnt
	echo ${NEWLINE}
	echo -e "[${YELLOW}INFO${RESET}] Time to enter CHROOT"
	echo -e "[${YELLOW}INFO${RESET}] The final script has been installed and move to your new root directory"
	echo -e "[${YELLOW}INFO${RESET}] Run these commands to finish setup"
	echo ${NEWLLINE}
	echo ${NEWLLINE}
	echo -e "${GREEN}[1] arch-chroot /mnt"
	echo -e "[2] ./hArchPost${RESET}"
	echo ${NEWLINE}
}

# Main installation flow
main() {
    greet
    checkNet || exit_on_error "Network setup failed. Exiting."

    getDrive || exit_on_error "Drive selection or partitioning failed. Exiting."

    installer || exit_on_error "Base system installation failed. Exiting."

    lastMinSetup || log_warning "Last minute setup encountered issues."

    log_success "Installation completed successfully!"
}

# Start the script
main
