#!/usr/bin/env bash

# Harch UEFI/BIO Automated Install (Hackers Arch)
# ---------------------------------------------------------------
# Author    : Chaotic_Guru                                       |
# Github    : https://github.com/ChaoticHackingNetwork           |
# Discord   : https://discord.gg/nv445EX (ChaoticHackingNetwork) |
# Version   : 0.1.3 						 |					 
# ---------------------------------------------------------------

GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RESET='\033[0m'
NEWLINE=$'\n'

greet() {
	echo -e "${PURPLE}Chaotic_Guru's hArch Installer${RESET}"
	echo ${NEWLINE}
	echo -e "${YELLOW}-> Simple${RESET}"
	echo -e "${GREEN}--> Quick${RESET}"
	echo -e "${WHITE}---> Efficient${RESET}"
	echo ${NEWLINE}
	echo -e ${YELLOW}
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo " ██░ ██  ▄▄▄       ██▀███   ▄████▄   ██░ ██     ██▓     ██▓ ███▄    █  █    ██ ▒██   ██▒"
	echo "▓██░ ██▒▒████▄    ▓██ ▒ ██▒▒██▀ ▀█  ▓██░ ██▒   ▓██▒    ▓██▒ ██ ▀█   █  ██  ▓██▒▒▒ █ █ ▒░"
	echo "▒██▀▀██░▒██  ▀█▄  ▓██ ░▄█ ▒▒▓█    ▄ ▒██▀▀██░   ▒██░    ▒██▒▓██  ▀█ ██▒▓██  ▒██░░░  █   ░"
	echo "░▓█ ░██ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓▓▄ ▄██▒░▓█ ░██    ▒██░    ░██░▓██▒  ▐▌██▒▓▓█  ░██░ ░ █ █ ▒ "
	echo "░▓█▒░██▓ ▓█   ▓██▒░██▓ ▒██▒▒ ▓███▀ ░░▓█▒░██▓   ░██████▒░██░▒██░   ▓██░▒▒█████▓ ▒██▒ ▒██▒"
	echo " ▒ ░░▒░▒ ▒▒   ▓▒█░░ ▒▓ ░▒▓░░ ░▒ ▒  ░ ▒ ░░▒░▒   ░ ▒░▓  ░░▓  ░ ▒░   ▒ ▒ ░▒▓▒ ▒ ▒ ▒▒ ░ ░▓ ░"
	echo " ▒ ░▒░ ░  ▒   ▒▒ ░  ░▒ ░ ▒░  ░  ▒    ▒ ░▒░ ░   ░ ░ ▒  ░ ▒ ░░ ░░   ░ ▒░░░▒░ ░ ░ ░░   ░▒ ░"
	echo " ░  ░░ ░  ░   ▒     ░░   ░ ░         ░  ░░ ░     ░ ░    ▒ ░   ░   ░ ░  ░░░ ░ ░  ░    ░  "
	echo " ░  ░  ░      ░  ░   ░     ░ ░       ░  ░  ░       ░  ░ ░           ░    ░      ░    ░  "
	echo "                           ░                                                            "
	echo -e "${RESET}"
	echo ${NEWLINE}
	echo ${NEWLINE}
}

checkNet() {
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo -e "[${YELLOW}INFO${RESET}]Checking Internet Connection...${NEWLINE}"
	if nc -zw1 archlinux.org 443
	then
  	echo -e "[${GREEN}INFO${RESET}] Firing up Scripting Engines..."
	echo -e "[${YELLOW}INFO${RESET}] Enabling Parallel Downloads..."
	sed -i '/#ParallelDownloads/s/^#//g' /etc/pacman.conf
	echo -e "[${YELLOW}INFO${RESET}] Syncing time..."
	timedatectl set-ntp true
	else
	echo -e "[${RED}ERROR${RESET}] Check Internet connection, something went wrong"
	exit
	
	fi
}

installer() {
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo -e "[${YELLOW}INFO${RESET}] Installing base system...${NEWLINE}"
	sleep 2
	pacstrap /mnt base base-devel linux linux-firmware vi vim nano
	#Generate fstab
	genfstab -U /mnt >> /mnt/etc/fstab
}

getDrive() {
	#Find new method to get disk
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo -e "[${YELLOW}INFO${RESET}] Gathering drives...${NEWLINE}"
	lsblk -f
	echo -e "[${GREEN}USER_INPUT${RESET}]"
	echo "Syntax: /dev/sda or /dev/nvme0n1"
	read -p "Enter Drive to prepare: " drive
	read -p "Do you want to manually partition [y/n]: " manual
	if [[ $manual == 'y' ]] || [[ $manual == 'Y' ]]
	then
		cfdisk $drive
	else
		echo ${NEWLINE}
		echo ${NEWLINE}
		echo -e "[${YELLOW}INFO${RESET}] Modifying $drive... HANG TIGHT!!!${NEWLINE}"
		sleep 3
		ls /sys/firmware/efi
		if [[ -d "/sys/firmware/efi" ]]
		then
			echo -e "[${YELLOW}INFO${RESET}] UEFI System Deteceted!${NEWLINE}"
			echo ${NEWLINE}
			sleep 2
			#https://superuser.com/a/984637
			sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk $drive
			g # Create new GPT Partition
			n # New partition
			p # Primary partition
			1 # First partition
				# EFI - start at beginning of disk
			+512M # /boot/EFI
			n
			p
			2
				# SWAP - start immediately after preceding partition
			+8G
			n 
			p
			3
				# ROOT, start immediately after preceding partition
				# default, use rest of disk space
			t # change part type
			3 # part number
			83 # linux FS
			p # print the in-memory table
			w # write changes to disk
			q # quit

EOF

			#Format partitions
			if [[ -d /sys/class/nvme ]]
			then
			BOOT="p1"
			SWAP="p2"
			HOME="p3"
			HOMEDRIVE=$drive$HOME
			mkfs.ext4 $HOMEDRIVE
			else
			BOOT="1"
			SWAP="2"
			HOME="3"
			HOMEDRIVE=$drive$HOME
			mkfs.ext4 $HOMEDRIVE

			fi

			#Mount partitions
			mount $HOMEDRIVE /mnt

			#Create swap space
			SWAPDRIVE=$drive$SWAP
			mkswap $SWAPDRIVE
			swapon $SWAPDRIVE

			#Setup EFI Dir
			BOOTDRIVE=$drive$BOOT 
			mkfs.fat -F32 $BOOTDRIVE
			mkdir -p /mnt/boot/EFI
			mount $BOOTDRIVE /mnt/boot/EFI

			else
			echo -e "${YELLOW}[*] BIOS was determined!${RESET}" 
			echo ""
			#Create partitions thru fdisk...
			#https://superuser.com/a/984637
			sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk $drive
			o # Clear the in-memory partition table
			n # New partition
			p # Primary partition
			1 # First partition
				# BIOS - start at beginning of disk
			+8G # /SWAP
			n 
			p
			2
				# ROOT, start immediately after preceding partition
				# default, use rest of disk space
			t # change part type
			2 # part number
			83 # linux FS
			p # print the in-memory table
			w # write changes to disk
			q # quit
EOF

			#Format partitions
			SWAP="1"
			HOME="2"
			HOMEDRIVE=$drive$HOME
			mkfs.ext4 $HOMEDRIVE

			#Mount partitions
			mount $HOMEDRIVE /mnt

			#Create swap space
			SWAPDRIVE=$drive$SWAP
			mkswap $SWAPDRIVE
			swapon $SWAPDRIVE


		fi
	fi
}

lastMinSetup() {
	#Finish last minute setup
	echo ${NEWLINE}
	echo ${NEWLINE}
	echo 0 > /proc/sys/kernel/hung_task_timeout_secs
	curl -O 'https://raw.githubusercontent.com/ChaoticHackingNetwork/Harch/main/hArchPost'
	chmod +x hArchPost
	mv hArchPost /mnt
	echo ${NEWLINE}
	echo -e "[${YELLOW}INFO${RESET}] Time to enter CHROOT"
	echo -e "[${YELLOW}INFO${RESET}] The final script has been installed and move to your new root directory"
	echo -e "[${YELLOW}INFO${RESET}] Run these commands to finish setup"
	echo ${NEWLLINE}
	echo ${NEWLLINE}
	echo -e "${GREEN}[1] arch-chroot /mnt"
	echo -e "[2] ./hArchPost${RESET}"
	echo ${NEWLINE}
}

greet
sleep 5
clear
checkNet
sleep 5
clear
getDrive
sleep 5
clear
installer
sleep 5
clear
lastMinSetup
