#!/usr/bin/env bash

# Harch UEFI/BIO Automated Install (Hackers Arch)
# ---------------------------------------------------------------
# Author    : Chaotic_Guru                                       |
# Github    : https://github.com/ChaoticHackingNetwork           |
# Discord   : https://discord.gg/nv445EX (ChaoticHackingNetwork) |
# Version   : 0.1.0 											 |
# ---------------------------------------------------------------

GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RESET='\033[0m'
NEWLINE=$'\n'

greet() {
	echo -e "${GREEN}Chaotic_Guru's Harch Installer${RESET}"
	echo""
	echo "╔╗ ╔╗            ╔╗      ╔╗                 "
	echo "║║ ║║            ║║      ║║                 "
	echo "║╚═╝║╔══╗ ╔═╗╔══╗║╚═╗    ║║   ╔╗╔═╗ ╔╗╔╗╔╗╔╗"
	echo "║╔═╗║╚ ╗║ ║╔╝║╔═╝║╔╗║    ║║ ╔╗╠╣║╔╗╗║║║║╚╬╬╝"
	echo "║║ ║║║╚╝╚╗║║ ║╚═╗║║║║    ║╚═╝║║║║║║║║╚╝║╔╬╬╗"
	echo "╚╝ ╚╝╚═══╝╚╝ ╚══╝╚╝╚╝    ╚═══╝╚╝╚╝╚╝╚══╝╚╝╚╝"
	echo""
	echo""
	echo""
}

checkNet() {
	echo -e "${YELLOW}Checking Internet Connection...${NEWLINE}"
	if nc -zw1 google.com 443
	then
  	echo -e "${GREEN}BOOM BABY!${RESET}"
	else
	echo -e "${RED}Check Internet connection, something went wrong${RESET}"
	fi
}

installer() {
	echo ${NEWLINE}
	echo -e "${GREEN}[!] Installing base system...${RESET}${NEWLINE}"
	pacstrap /mnt base base-devel linux linux-firmware vi vim nano
	#Generate fstab
	genfstab -U /mnt >> /mnt/etc/fstab
	mountpoints=$(cat /mnt/etc/fstab)
	echo -e "${GREEN}New Mount Points created... ${NEWLINE}${RESET}"
	echo -e "${YELLOW}$mountpoints${NEWLINE}{$NEWLINE}"
	echo -e "[!] Finishing last minute setup...${RESET}"
}

getDrive() {
	#Find new method to get disk
	echo ""
	echo ""
	echo -e "${GREEN}Gathering drives...${RESET}${NEWLINE}"
	local drives=$(lsblk -f)
	echo -e "${YELLOW}$drives${RESET}${NEWLINE}"
	read -p "Enter Drive to install Harch on: " drive
	echo ""
	echo -e "${GREEN}[*] Modifying $drive... HANG TIGHT!!!${RESET}${NEWLINE}"
	sleep 3
	ls /sys/firmware/efi
	if [[ -d "/sys/firmware/efi" ]]
	then
	echo -e "${YELLOW}[*] UEFI System Deteceted!${RESET}"
	echo "" 
	sleep 2
	#https://superuser.com/a/984637
	sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk $drive
	g # Clear the in-memory partition table
	n # New partition
	p # Primary partition
	1 # First partition
		# EFI - start at beginning of disk
	+512M # /boot/EFI

	n
	p
	2
		# SWAP - start immediately after preceding partition
	+8G
	n 
	p
	3
		# ROOT, start immediately after preceding partition
		# default, use rest of disk space
	p # print the in-memory table
	w # write changes to disk
	q # quit

EOF

		#Format partitions
		if [[ -d /sys/class/nvme ]]
		then
		BOOT="p1"
		SWAP="p2"
		HOME="p3"
		HOMEDRIVE=$drive$HOME
		mkfs.ext4 $HOMEDRIVE
		else
		BOOT="1"
		SWAP="2"
		HOME="3"
		HOMEDRIVE=$drive$HOME
		mkfs.ext4 $HOMEDRIVE
		
		fi

		#Mount partitions
		mount $HOMEDRIVE /mnt

		#Create swap space
		SWAPDRIVE=$drive$SWAP
		mkswap $SWAPDRIVE
		swapon $SWAPDRIVE
		
		#Setup EFI Dir
		BOOTDRIVE=$drive$BOOT 
		mkfs.fat -F32 $BOOTDRIVE
		mkdir /mnt/boot/EFI
		mount $BOOTDRIVE /mnt/boot/EFI

	else
	echo -e "${YELLOW}[*] BIOS was determined!${RESET}" 
	echo ""
	#Create partitions thru fdisk...
	#https://superuser.com/a/984637
	sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk $drive
	o # Clear the in-memory partition table
	n # New partition
	p # Primary partition
	1 # First partition
		# EFI - start at beginning of disk
	+512M # /boot
	n
	p
	2
		# SWAP - start immediately after preceding partition
	+8G
	n 
	p
	3
		# ROOT, start immediately after preceding partition
		# default, use rest of disk space
	p # print the in-memory table
	w # write changes to disk
	q # quit
EOF

		#Format partitions
		BOOT="1"
		SWAP="2"
		HOME="3"
		HOMEDRIVE=$drive$HOME
		mkfs.ext4 $HOMEDRIVE

		#Mount partitions
		mount $HOMEDRIVE /mnt

		#Create swap space
		SWAPDRIVE=$drive$SWAP
		mkswap $SWAPDRIVE
		swapon $SWAPDRIVE
		
		#Setup Boot Drive
		BOOTDRIVE=$drive$BOOT
		mkdir /mnt/boot
		mount $BOOTDRIVE /mnt/boot

	fi
}

lastMinSetup() {
	#Finish last minute setup
	echo 0 > /proc/sys/kernel/hung_task_timeout_secs
	curl -O 'https://raw.githubusercontent.com/ChaoticHackingNetwork/Harch/main/HarchPostV1.0'
	chmod +x HarchPostV1.0
	mv HarchPostV1.0 /mnt
	echo ${NEWLINE}
	echo "[!] The final script has been installed and move to your new root directory"
	echo "[!] Run these commands to finish setup"
	echo ${NEWLLINE}
	echo ${NEWLLINE}
	echo -e "${GREEN}[1] arch-chroot /mnt"
	echo -e "[2] ./HarchPostV1.0${RESET}"
	echo ${NEWLINE}
}

greet
sleep 5
clear
checkNet
sleep 5
clear
getDrive
sleep 5
clear
installer
sleep 5
clear
lastMinSetup
