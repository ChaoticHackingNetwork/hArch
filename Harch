#!/bin/bash

# Harch UEFI/BIO Automated Install (Hackers Arch)
# ---------------------------------------------------------------
# Author    : Chaotic_Guru                                       |
# Github    : https://github.com/ChaoticHackingNetwork           |
# Discord   : https://discord.gg/nv445EX (ChaoticHackingNetwork) |
# Version   : 0.0.0                                              |
# ---------------------------------------------------------------

GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RESET='\033[0m'


echo -e "${GREEN}Chaotic_Guru's Harch Installer${RESET}"
echo""
echo "╔╗ ╔╗            ╔╗      ╔╗                 "
echo "║║ ║║            ║║      ║║                 "
echo "║╚═╝║╔══╗ ╔═╗╔══╗║╚═╗    ║║   ╔╗╔═╗ ╔╗╔╗╔╗╔╗"
echo "║╔═╗║╚ ╗║ ║╔╝║╔═╝║╔╗║    ║║ ╔╗╠╣║╔╗╗║║║║╚╬╬╝"
echo "║║ ║║║╚╝╚╗║║ ║╚═╗║║║║    ║╚═╝║║║║║║║║╚╝║╔╬╬╗"
echo "╚╝ ╚╝╚═══╝╚╝ ╚══╝╚╝╚╝    ╚═══╝╚╝╚╝╚╝╚══╝╚╝╚╝"
echo""
echo""
echo""
                                                      
#Network Connections
echo -e "${GREEN}[!] Internet check...${RESET}"
read -p 'Are you connected to the Internet? [y/N]: ' connected
if ! [ $connected = 'y' ] && ! [ $connected = 'Y' ]
then
	echo -e "${RED}[X] Please connect to the Internet to continue...${RESET}"
	exit
fi

#Varablize Drive
lsblk
read -p "Enter Drive to install Harch on: " drive
echo""
echo -e "${GREEN}[*] Modifying $drive...${RESET}"
read -p '[!] This script is going to destroy data on this drive, ensure this is what you want, Continue? [y/N]:' device
if ! [ $device = 'y' ] && ! [ $device = 'Y' ]
then
	echo -e "${RED}[X] Change your partition via the script${RESET}"
	exit
fi

#Determine BIOS or UEFI
ls /sys/firmware/efi
if [[ -d "/sys/firmware/efi" ]]
then
echo -e "${YELLOW}[*] UEFI was determined!${RESET}"
echo"" 
echo -e "${YELLOW}[*] This script will create and format the following partitions:"
echo "[-] /dev/sda1 - 512M will be mounted as /boot/EFI"
echo "[-] /dev/sda2 - 16G of space will be mounted as SWAP"
echo -e "[-] /dev/sda3 - rest of space will be mounted as /${RESET}"
echo""
echo""
echo -e "${RED}[X] Exit now if this is not correct!!!${RESET}"
sleep 10s
#Create partitions thru fdisk...

#https://superuser.com/a/984637
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk $drive
o # Clear the in-memory partition table
n # New partition
p # Primary partition
1 # First partition
	# EFI - start at beginning of disk
+512M # /boot/EFI
n
p
2
	# SWAP - start immediately after preceding partition
+16G
n 
p
3
	# ROOT, start immediately after preceding partition
	# default, use rest of disk space
p # print the in-memory table
w # write changes to disk
q # quit
EOF

	#Format partitions
	BOOT="1"
	SWAP="2"
	HOME="3"
	HOMEDRIVE=$drive$HOME
	mkfs.ext4 $HOMEDRIVE
	BOOTDRIVE=$drive$BOOT 
	mkfs.fat -F32 $BOOTDRIVE

	#Mount partitions
	mount $HOMEDRIVE /mnt

	#Create swap space
	SWAPDRIVE=$drive$SWAP
	mkswap $SWAPDRIVE
	swapon $SWAPDRIVE

else
echo -e "${YELLOW}[*] BIOS was determined!${RESET}" 
echo "[-] This script will create and format the following partitions:"
echo ""
echo -e "${YELLOW}[*] /dev/sda1 - 16G will be mounted as SWAP space"
echo -e "[-] /dev/sda2 - Rest of space will be mounted as /${RESET}"
echo""
echo""
echo -e "${RED}[X] Exit now if this is not correct!!!$P{RESET}"
sleep 10s
#Create partitions thru fdisk...
#https://superuser.com/a/984637
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk $drive
o # Clear the in-memory partition table
n # New partition
p # Primary partition
1 # First partition
	# SWAP - start at beginning of disk
+16G # swap space
n 
p
2
	# ROOT, start immediately after preceding partition
	# default, use rest of disk space
p # print the in-memory table
w # write changes to disk
q # quit
EOF

	#Format partitions
	SWAP="1"
	HOME="2"
	HOMEDRIVE=$drive$HOME
	mkfs.ext4 $HOMEDRIVE

	#Mount partitions
	mount $HOMEDRIVE /mnt

	#Create swap space
	SWAPDRIVE=$drive$SWAP
	mkswap $SWAPDRIVE
	swapon $SWAPDRIVE

fi

#Install base system
echo -e "${GREEN}[!] Installing base system...${RESET}"
pacstrap /mnt base base-devel linux linux-firmware

#Generate fstab
genfstab -U /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab
lsblk
echo -e "${YELLOW}[!] Finishing last minute setup...${RESET}"
sleep 3

#Finish last minute setup
echo 0 > /proc/sys/kernel/hung_task_timeout_secs
curl -O https://raw.githubusercontent.com/ChaoticHackingNetwork/Harch/main/HarchPOST
mv HarchPOST /mnt
echo""
echo "[!] The final script has been installed and move to your new root directory"
echo "[!] Run these commands to finish setup"
echo""
echo""
echo -e "${GREEN}[1] arch-chroot /mnt"
echo -"[2] chmod +x HarchPOST"
echo -e "[3] ./HarchPOST${RESET}"
echo""

exit
